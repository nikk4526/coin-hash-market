"""
Key Switcher ‚Äî –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ —Ä–∞–∑–Ω—ã–π –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ (—á–µ—Ä–µ–∑ multisig –∏–ª–∏ reuse).
"""

import sys
import requests

def fetch_transactions(address):
    url = f"https://blockstream.info/api/address/{address}/txs"
    r = requests.get(url)
    r.raise_for_status()
    return r.json()

def extract_pubkeys(tx):
    pubkeys = set()
    for vin in tx.get("vin", []):
        scriptsig = vin.get("scriptsig_asm", "")
        if "OP_PUSHBYTES_33" in scriptsig or "OP_PUSHBYTES_65" in scriptsig:
            parts = scriptsig.split()
            for part in parts:
                if len(part) in [66, 130]:  # compressed or uncompressed pubkey
                    pubkeys.add(part)
    return pubkeys

def main(address):
    print(f"üîç –ê–Ω–∞–ª–∏–∑ –∞–¥—Ä–µ—Å–∞: {address}")
    try:
        txs = fetch_transactions(address)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", e)
        return

    all_pubkeys = set()
    for tx in txs:
        keys = extract_pubkeys(tx)
        all_pubkeys.update(keys)

    print(f"üîë –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–π: {len(all_pubkeys)}")
    if len(all_pubkeys) > 1:
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ—Ö–æ–∂–µ, —á—Ç–æ –∞–¥—Ä–µ—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏.")
    elif len(all_pubkeys) == 1:
        print("‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á –Ω–µ –º–µ–Ω—è–ª—Å—è.")
    else:
        print("‚ÑπÔ∏è –ü—É–±–ª–∏—á–Ω—ã–µ –∫–ª—é—á–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ bech32 –∏–ª–∏ multisig –∞–¥—Ä–µ—Å).")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python key_switcher.py <bitcoin_address>")
        sys.exit(1)
    main(sys.argv[1])
